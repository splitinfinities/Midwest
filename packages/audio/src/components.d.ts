/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface WebAudio {
        "autoplay": Boolean;
        "connect_the_world": () => Promise<boolean>;
        "get_context": () => Promise<AudioContext>;
        "is_prepared": () => Promise<Boolean>;
        "midi": Boolean;
        "name": string;
        "source": (name: any) => Promise<HTMLWebAudioSourceElement>;
        "stop": () => Promise<void>;
    }
    interface WebAudioDebugger {
        "addHistory": (string: History) => Promise<void>;
        "count": number;
    }
    interface WebAudioEffect {
        "attachEffect": (context: any, source: any) => Promise<string>;
        "axis": string;
        "method": string;
        "midicontroller": number;
        "responds": string;
        "type": string;
        "use": string;
        "value": number;
    }
    interface WebAudioSequencer {
        "autoplay": boolean;
        "custom": Function;
        "name": string;
        "play": () => Promise<void>;
        "stop": () => Promise<void>;
        "taps": number;
        "tempo": number;
    }
    interface WebAudioSource {
        "assignBuffer": (webAudio: any, buffer: any) => Promise<void>;
        "effectsvolume": number;
        "gain": (place?: string) => Promise<GainNode>;
        "getBuffer": () => Promise<AudioBuffer>;
        "getDuration": () => Promise<number>;
        "inert": boolean;
        "midichannel": number;
        "midikey": number;
        "name": string;
        "pause": () => Promise<void>;
        "play": () => Promise<void>;
        "playing": boolean;
        "prepare": () => Promise<void>;
        "prepared": boolean;
        "skipTo": (time: any) => Promise<void>;
        "src": string;
        "stop": () => Promise<void>;
        "toggle": () => Promise<void>;
        "webAudio": () => Promise<HTMLElement>;
    }
    interface WebAudioVisualizer {
        "_color": any;
        "analyser": AnalyserNode;
        "color": string;
        "connect": (context: AudioContext, destination?: any) => Promise<this>;
        "for": string;
        "height": number;
        "renderer": AnalyserNode;
        "size": number;
        "smoothing": number;
        "type": string | "wave" | "bars" | "circle" | "bars2";
        "width": number;
    }
    interface WebAudioVisualizerShader {
        "type": string;
    }
}
declare global {
    interface HTMLWebAudioElement extends Components.WebAudio, HTMLStencilElement {
    }
    var HTMLWebAudioElement: {
        prototype: HTMLWebAudioElement;
        new (): HTMLWebAudioElement;
    };
    interface HTMLWebAudioDebuggerElement extends Components.WebAudioDebugger, HTMLStencilElement {
    }
    var HTMLWebAudioDebuggerElement: {
        prototype: HTMLWebAudioDebuggerElement;
        new (): HTMLWebAudioDebuggerElement;
    };
    interface HTMLWebAudioEffectElement extends Components.WebAudioEffect, HTMLStencilElement {
    }
    var HTMLWebAudioEffectElement: {
        prototype: HTMLWebAudioEffectElement;
        new (): HTMLWebAudioEffectElement;
    };
    interface HTMLWebAudioSequencerElement extends Components.WebAudioSequencer, HTMLStencilElement {
    }
    var HTMLWebAudioSequencerElement: {
        prototype: HTMLWebAudioSequencerElement;
        new (): HTMLWebAudioSequencerElement;
    };
    interface HTMLWebAudioSourceElement extends Components.WebAudioSource, HTMLStencilElement {
    }
    var HTMLWebAudioSourceElement: {
        prototype: HTMLWebAudioSourceElement;
        new (): HTMLWebAudioSourceElement;
    };
    interface HTMLWebAudioVisualizerElement extends Components.WebAudioVisualizer, HTMLStencilElement {
    }
    var HTMLWebAudioVisualizerElement: {
        prototype: HTMLWebAudioVisualizerElement;
        new (): HTMLWebAudioVisualizerElement;
    };
    interface HTMLWebAudioVisualizerShaderElement extends Components.WebAudioVisualizerShader, HTMLStencilElement {
    }
    var HTMLWebAudioVisualizerShaderElement: {
        prototype: HTMLWebAudioVisualizerShaderElement;
        new (): HTMLWebAudioVisualizerShaderElement;
    };
    interface HTMLElementTagNameMap {
        "web-audio": HTMLWebAudioElement;
        "web-audio-debugger": HTMLWebAudioDebuggerElement;
        "web-audio-effect": HTMLWebAudioEffectElement;
        "web-audio-sequencer": HTMLWebAudioSequencerElement;
        "web-audio-source": HTMLWebAudioSourceElement;
        "web-audio-visualizer": HTMLWebAudioVisualizerElement;
        "web-audio-visualizer-shader": HTMLWebAudioVisualizerShaderElement;
    }
}
declare namespace LocalJSX {
    interface WebAudio {
        "autoplay"?: Boolean;
        "midi"?: Boolean;
        "name"?: string;
    }
    interface WebAudioDebugger {
        "count"?: number;
    }
    interface WebAudioEffect {
        "axis"?: string;
        "method"?: string;
        "midicontroller"?: number;
        "responds"?: string;
        "type"?: string;
        "use"?: string;
        "value"?: number;
    }
    interface WebAudioSequencer {
        "autoplay"?: boolean;
        "custom"?: Function;
        "name"?: string;
        "taps"?: number;
        "tempo"?: number;
    }
    interface WebAudioSource {
        "effectsvolume"?: number;
        "inert"?: boolean;
        "midichannel"?: number;
        "midikey"?: number;
        "name"?: string;
        "onUpdate"?: (event: CustomEvent<any>) => void;
        "playing"?: boolean;
        "prepared"?: boolean;
        "src"?: string;
    }
    interface WebAudioVisualizer {
        "_color"?: any;
        "analyser"?: AnalyserNode;
        "color"?: string;
        "for"?: string;
        "height"?: number;
        "renderer"?: AnalyserNode;
        "size"?: number;
        "smoothing"?: number;
        "type"?: string | "wave" | "bars" | "circle" | "bars2";
        "width"?: number;
    }
    interface WebAudioVisualizerShader {
        "type"?: string;
    }
    interface IntrinsicElements {
        "web-audio": WebAudio;
        "web-audio-debugger": WebAudioDebugger;
        "web-audio-effect": WebAudioEffect;
        "web-audio-sequencer": WebAudioSequencer;
        "web-audio-source": WebAudioSource;
        "web-audio-visualizer": WebAudioVisualizer;
        "web-audio-visualizer-shader": WebAudioVisualizerShader;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "web-audio": LocalJSX.WebAudio & JSXBase.HTMLAttributes<HTMLWebAudioElement>;
            "web-audio-debugger": LocalJSX.WebAudioDebugger & JSXBase.HTMLAttributes<HTMLWebAudioDebuggerElement>;
            "web-audio-effect": LocalJSX.WebAudioEffect & JSXBase.HTMLAttributes<HTMLWebAudioEffectElement>;
            "web-audio-sequencer": LocalJSX.WebAudioSequencer & JSXBase.HTMLAttributes<HTMLWebAudioSequencerElement>;
            "web-audio-source": LocalJSX.WebAudioSource & JSXBase.HTMLAttributes<HTMLWebAudioSourceElement>;
            "web-audio-visualizer": LocalJSX.WebAudioVisualizer & JSXBase.HTMLAttributes<HTMLWebAudioVisualizerElement>;
            "web-audio-visualizer-shader": LocalJSX.WebAudioVisualizerShader & JSXBase.HTMLAttributes<HTMLWebAudioVisualizerShaderElement>;
        }
    }
}
