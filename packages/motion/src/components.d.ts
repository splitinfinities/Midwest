/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface MidwestAnimateText {
        "delay": number;
        "duration": number;
        "in": () => Promise<void>;
        "method": string;
        "onlyIn": boolean;
        "out": () => Promise<void>;
        "phrase": boolean;
        "words": boolean;
    }
    interface MidwestAutoScroll {
        "autoplay": boolean;
        "loop": boolean;
        "play": () => Promise<void>;
        "speed": number;
        "startPosition": number;
        "stop": () => Promise<void>;
    }
    interface MidwestBlur {
        "horizontal": number;
        "vertical": number;
    }
    interface MidwestFollow {
        "distance": number;
        "padding": number;
        "type": "scroll" | "cursor";
    }
    interface MidwestKeyframes {
        "frame": number;
        "height": number;
        "src": string;
        "width": number;
    }
    interface MidwestParallax {
        "center": boolean;
        "horizontal": boolean;
    }
    interface MidwestParallaxSection {
        "speed": number;
    }
    interface MidwestScatter {
        "colors": boolean;
        "float": boolean;
        "max": number;
        "min": number;
        "sizes": boolean;
    }
    interface MidwestScrollZRoot {
        "cameraSpeed": number;
        "cameraZ": number;
        "initialOriginX": number;
        "initialOriginY": number;
        "itemZ": number;
        "scatter": () => Promise<void>;
        "scenePerspective": number;
    }
    interface MidwestScrollZSection {
    }
    interface MidwestSlickSlides {
        "autoHeight": boolean;
        "autoplay": boolean;
        "centeredSlides": boolean;
        "direction": "horizontal" | "vertical";
        "effect": "slide" | "fade" | "cube" | "coverflow" | "flip";
        /**
          * Get the index of the active slide.
         */
        "getActiveIndex": () => Promise<number>;
        /**
          * Get the index of the previous slide.
         */
        "getPreviousIndex": () => Promise<number>;
        "initialSlide": number;
        "instance": () => Promise<any>;
        /**
          * Get whether or not the current slide is the first slide.
         */
        "isBeginning": () => Promise<boolean>;
        /**
          * Get whether or not the current slide is the last slide.
         */
        "isEnd": () => Promise<boolean>;
        /**
          * Get the total number of slides.
         */
        "length": () => Promise<number>;
        /**
          * Lock or unlock the ability to slide to the next slides.
         */
        "lockSwipeToNext": (shouldLockSwipeToNext: boolean) => Promise<any>;
        /**
          * Lock or unlock the ability to slide to the previous slides.
         */
        "lockSwipeToPrev": (shouldLockSwipeToPrev: boolean) => Promise<any>;
        /**
          * Lock or unlock the ability to slide to change slides.
         */
        "lockSwipes": (shouldLockSwipes: boolean) => Promise<any>;
        "loop": boolean;
        "nested": boolean;
        /**
          * Options to pass to the swiper instance. See http://idangero.us/swiper/api/ for valid options
         */
        "options": any;
        "pagination": boolean;
        "responsive": boolean;
        /**
          * Transition to the next slide.
         */
        "slideNext": (speed?: number, runCallbacks?: boolean) => Promise<void>;
        /**
          * Transition to the previous slide.
         */
        "slidePrev": (speed?: number, runCallbacks?: boolean) => Promise<void>;
        /**
          * Transition to the specified slide.
         */
        "slideTo": (index: number, speed?: number, runCallbacks?: boolean) => Promise<void>;
        "slidesPerView": number;
        "spaceBetween": number;
        "speed": number;
        /**
          * Start auto play.
         */
        "startAutoplay": () => Promise<void>;
        /**
          * Stop auto play.
         */
        "stopAutoplay": () => Promise<void>;
        /**
          * Update the underlying slider implementation. Call this if you've added or removed child slides.
         */
        "update": () => Promise<void>;
        "watchSlidesProgress": boolean;
        "watchSlidesVisibility": boolean;
    }
    interface MidwestSlide {
        "slideId": number;
        "width": string;
    }
    interface MidwestSlides {
        /**
          * Show or hide the pager
         */
        "padding": string;
        /**
          * Show or hide the pager
         */
        "pager": boolean;
    }
    interface MidwestStarscape {
    }
    interface MidwestStory {
        "target": string;
    }
}
declare global {
    interface HTMLMidwestAnimateTextElement extends Components.MidwestAnimateText, HTMLStencilElement {
    }
    var HTMLMidwestAnimateTextElement: {
        prototype: HTMLMidwestAnimateTextElement;
        new (): HTMLMidwestAnimateTextElement;
    };
    interface HTMLMidwestAutoScrollElement extends Components.MidwestAutoScroll, HTMLStencilElement {
    }
    var HTMLMidwestAutoScrollElement: {
        prototype: HTMLMidwestAutoScrollElement;
        new (): HTMLMidwestAutoScrollElement;
    };
    interface HTMLMidwestBlurElement extends Components.MidwestBlur, HTMLStencilElement {
    }
    var HTMLMidwestBlurElement: {
        prototype: HTMLMidwestBlurElement;
        new (): HTMLMidwestBlurElement;
    };
    interface HTMLMidwestFollowElement extends Components.MidwestFollow, HTMLStencilElement {
    }
    var HTMLMidwestFollowElement: {
        prototype: HTMLMidwestFollowElement;
        new (): HTMLMidwestFollowElement;
    };
    interface HTMLMidwestKeyframesElement extends Components.MidwestKeyframes, HTMLStencilElement {
    }
    var HTMLMidwestKeyframesElement: {
        prototype: HTMLMidwestKeyframesElement;
        new (): HTMLMidwestKeyframesElement;
    };
    interface HTMLMidwestParallaxElement extends Components.MidwestParallax, HTMLStencilElement {
    }
    var HTMLMidwestParallaxElement: {
        prototype: HTMLMidwestParallaxElement;
        new (): HTMLMidwestParallaxElement;
    };
    interface HTMLMidwestParallaxSectionElement extends Components.MidwestParallaxSection, HTMLStencilElement {
    }
    var HTMLMidwestParallaxSectionElement: {
        prototype: HTMLMidwestParallaxSectionElement;
        new (): HTMLMidwestParallaxSectionElement;
    };
    interface HTMLMidwestScatterElement extends Components.MidwestScatter, HTMLStencilElement {
    }
    var HTMLMidwestScatterElement: {
        prototype: HTMLMidwestScatterElement;
        new (): HTMLMidwestScatterElement;
    };
    interface HTMLMidwestScrollZRootElement extends Components.MidwestScrollZRoot, HTMLStencilElement {
    }
    var HTMLMidwestScrollZRootElement: {
        prototype: HTMLMidwestScrollZRootElement;
        new (): HTMLMidwestScrollZRootElement;
    };
    interface HTMLMidwestScrollZSectionElement extends Components.MidwestScrollZSection, HTMLStencilElement {
    }
    var HTMLMidwestScrollZSectionElement: {
        prototype: HTMLMidwestScrollZSectionElement;
        new (): HTMLMidwestScrollZSectionElement;
    };
    interface HTMLMidwestSlickSlidesElement extends Components.MidwestSlickSlides, HTMLStencilElement {
    }
    var HTMLMidwestSlickSlidesElement: {
        prototype: HTMLMidwestSlickSlidesElement;
        new (): HTMLMidwestSlickSlidesElement;
    };
    interface HTMLMidwestSlideElement extends Components.MidwestSlide, HTMLStencilElement {
    }
    var HTMLMidwestSlideElement: {
        prototype: HTMLMidwestSlideElement;
        new (): HTMLMidwestSlideElement;
    };
    interface HTMLMidwestSlidesElement extends Components.MidwestSlides, HTMLStencilElement {
    }
    var HTMLMidwestSlidesElement: {
        prototype: HTMLMidwestSlidesElement;
        new (): HTMLMidwestSlidesElement;
    };
    interface HTMLMidwestStarscapeElement extends Components.MidwestStarscape, HTMLStencilElement {
    }
    var HTMLMidwestStarscapeElement: {
        prototype: HTMLMidwestStarscapeElement;
        new (): HTMLMidwestStarscapeElement;
    };
    interface HTMLMidwestStoryElement extends Components.MidwestStory, HTMLStencilElement {
    }
    var HTMLMidwestStoryElement: {
        prototype: HTMLMidwestStoryElement;
        new (): HTMLMidwestStoryElement;
    };
    interface HTMLElementTagNameMap {
        "midwest-animate-text": HTMLMidwestAnimateTextElement;
        "midwest-auto-scroll": HTMLMidwestAutoScrollElement;
        "midwest-blur": HTMLMidwestBlurElement;
        "midwest-follow": HTMLMidwestFollowElement;
        "midwest-keyframes": HTMLMidwestKeyframesElement;
        "midwest-parallax": HTMLMidwestParallaxElement;
        "midwest-parallax-section": HTMLMidwestParallaxSectionElement;
        "midwest-scatter": HTMLMidwestScatterElement;
        "midwest-scroll-z-root": HTMLMidwestScrollZRootElement;
        "midwest-scroll-z-section": HTMLMidwestScrollZSectionElement;
        "midwest-slick-slides": HTMLMidwestSlickSlidesElement;
        "midwest-slide": HTMLMidwestSlideElement;
        "midwest-slides": HTMLMidwestSlidesElement;
        "midwest-starscape": HTMLMidwestStarscapeElement;
        "midwest-story": HTMLMidwestStoryElement;
    }
}
declare namespace LocalJSX {
    interface MidwestAnimateText {
        "delay"?: number;
        "duration"?: number;
        "method"?: string;
        "onlyIn"?: boolean;
        "phrase"?: boolean;
        "words"?: boolean;
    }
    interface MidwestAutoScroll {
        "autoplay"?: boolean;
        "loop"?: boolean;
        "speed"?: number;
        "startPosition"?: number;
    }
    interface MidwestBlur {
        "horizontal"?: number;
        "vertical"?: number;
    }
    interface MidwestFollow {
        "distance"?: number;
        "padding"?: number;
        "type"?: "scroll" | "cursor";
    }
    interface MidwestKeyframes {
        "frame"?: number;
        "height"?: number;
        "src"?: string;
        "width"?: number;
    }
    interface MidwestParallax {
        "center"?: boolean;
        "horizontal"?: boolean;
    }
    interface MidwestParallaxSection {
        "speed"?: number;
    }
    interface MidwestScatter {
        "colors"?: boolean;
        "float"?: boolean;
        "max"?: number;
        "min"?: number;
        "sizes"?: boolean;
    }
    interface MidwestScrollZRoot {
        "cameraSpeed"?: number;
        "cameraZ"?: number;
        "initialOriginX"?: number;
        "initialOriginY"?: number;
        "itemZ"?: number;
        "scenePerspective"?: number;
    }
    interface MidwestScrollZSection {
    }
    interface MidwestSlickSlides {
        "autoHeight"?: boolean;
        "autoplay"?: boolean;
        "centeredSlides"?: boolean;
        "direction"?: "horizontal" | "vertical";
        "effect"?: "slide" | "fade" | "cube" | "coverflow" | "flip";
        "initialSlide"?: number;
        "loop"?: boolean;
        "nested"?: boolean;
        /**
          * Emitted after the active slide has changed.
         */
        "onIonSlideDidChange"?: (event: CustomEvent<any>) => void;
        /**
          * Emitted when the slider is actively being moved.
         */
        "onIonSlideDrag"?: (event: CustomEvent<any>) => void;
        /**
          * Emitted when the next slide has ended.
         */
        "onIonSlideNextEnd"?: (event: CustomEvent<any>) => void;
        /**
          * Emitted when the next slide has started.
         */
        "onIonSlideNextStart"?: (event: CustomEvent<any>) => void;
        /**
          * Emitted when the previous slide has ended.
         */
        "onIonSlidePrevEnd"?: (event: CustomEvent<any>) => void;
        /**
          * Emitted when the previous slide has started.
         */
        "onIonSlidePrevStart"?: (event: CustomEvent<any>) => void;
        /**
          * Emitted when the slider is at the last slide.
         */
        "onIonSlideReachEnd"?: (event: CustomEvent<any>) => void;
        /**
          * Emitted when the slider is at its initial position.
         */
        "onIonSlideReachStart"?: (event: CustomEvent<any>) => void;
        /**
          * Emitted when the user releases the touch.
         */
        "onIonSlideTouchEnd"?: (event: CustomEvent<any>) => void;
        /**
          * Emitted when the user first touches the slider.
         */
        "onIonSlideTouchStart"?: (event: CustomEvent<any>) => void;
        /**
          * Emitted when the slide transition has ended.
         */
        "onIonSlideTransitionEnd"?: (event: CustomEvent<any>) => void;
        /**
          * Emitted when the slide transition has started.
         */
        "onIonSlideTransitionStart"?: (event: CustomEvent<any>) => void;
        /**
          * Emitted before the active slide has changed.
         */
        "onIonSlideWillChange"?: (event: CustomEvent<any>) => void;
        /**
          * Options to pass to the swiper instance. See http://idangero.us/swiper/api/ for valid options
         */
        "options"?: any;
        "pagination"?: boolean;
        "responsive"?: boolean;
        "slidesPerView"?: number;
        "spaceBetween"?: number;
        "speed"?: number;
        "watchSlidesProgress"?: boolean;
        "watchSlidesVisibility"?: boolean;
    }
    interface MidwestSlide {
        "onSwitched"?: (event: CustomEvent<any>) => void;
        "slideId"?: number;
        "width"?: string;
    }
    interface MidwestSlides {
        /**
          * Show or hide the pager
         */
        "padding"?: string;
        /**
          * Show or hide the pager
         */
        "pager"?: boolean;
    }
    interface MidwestStarscape {
    }
    interface MidwestStory {
        "target"?: string;
    }
    interface IntrinsicElements {
        "midwest-animate-text": MidwestAnimateText;
        "midwest-auto-scroll": MidwestAutoScroll;
        "midwest-blur": MidwestBlur;
        "midwest-follow": MidwestFollow;
        "midwest-keyframes": MidwestKeyframes;
        "midwest-parallax": MidwestParallax;
        "midwest-parallax-section": MidwestParallaxSection;
        "midwest-scatter": MidwestScatter;
        "midwest-scroll-z-root": MidwestScrollZRoot;
        "midwest-scroll-z-section": MidwestScrollZSection;
        "midwest-slick-slides": MidwestSlickSlides;
        "midwest-slide": MidwestSlide;
        "midwest-slides": MidwestSlides;
        "midwest-starscape": MidwestStarscape;
        "midwest-story": MidwestStory;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "midwest-animate-text": LocalJSX.MidwestAnimateText & JSXBase.HTMLAttributes<HTMLMidwestAnimateTextElement>;
            "midwest-auto-scroll": LocalJSX.MidwestAutoScroll & JSXBase.HTMLAttributes<HTMLMidwestAutoScrollElement>;
            "midwest-blur": LocalJSX.MidwestBlur & JSXBase.HTMLAttributes<HTMLMidwestBlurElement>;
            "midwest-follow": LocalJSX.MidwestFollow & JSXBase.HTMLAttributes<HTMLMidwestFollowElement>;
            "midwest-keyframes": LocalJSX.MidwestKeyframes & JSXBase.HTMLAttributes<HTMLMidwestKeyframesElement>;
            "midwest-parallax": LocalJSX.MidwestParallax & JSXBase.HTMLAttributes<HTMLMidwestParallaxElement>;
            "midwest-parallax-section": LocalJSX.MidwestParallaxSection & JSXBase.HTMLAttributes<HTMLMidwestParallaxSectionElement>;
            "midwest-scatter": LocalJSX.MidwestScatter & JSXBase.HTMLAttributes<HTMLMidwestScatterElement>;
            "midwest-scroll-z-root": LocalJSX.MidwestScrollZRoot & JSXBase.HTMLAttributes<HTMLMidwestScrollZRootElement>;
            "midwest-scroll-z-section": LocalJSX.MidwestScrollZSection & JSXBase.HTMLAttributes<HTMLMidwestScrollZSectionElement>;
            "midwest-slick-slides": LocalJSX.MidwestSlickSlides & JSXBase.HTMLAttributes<HTMLMidwestSlickSlidesElement>;
            "midwest-slide": LocalJSX.MidwestSlide & JSXBase.HTMLAttributes<HTMLMidwestSlideElement>;
            "midwest-slides": LocalJSX.MidwestSlides & JSXBase.HTMLAttributes<HTMLMidwestSlidesElement>;
            "midwest-starscape": LocalJSX.MidwestStarscape & JSXBase.HTMLAttributes<HTMLMidwestStarscapeElement>;
            "midwest-story": LocalJSX.MidwestStory & JSXBase.HTMLAttributes<HTMLMidwestStoryElement>;
        }
    }
}
